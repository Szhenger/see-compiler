# Project Name: `SeeC`
# Version: 1.0.0
# Log Start Date: 2025-05-05
# Log File: doc_log.txt

[2025-05-05] - Day 1: `SeeC` Initialization
- Initialized source code files for `SeeC` project
- Set up `src/`, `include/`, `tests/`, `build/` directories for `SeeC` structure
- Set up `Makefile`, `.gitignore` files for efficient workflow
- Set up `doc_log.txt` file for tracking progress

[2025-05-28] - Day 2: Source Folder Initialization
- Planned to support compilation of a `Hello, World` program
- Defined the interface of tokens in `token.h`
- Defined the driver structure of `main.c`
- Defined a subset of tokens in `token.c`
- Defined the lexer structure in `lexer.c`
- Defined a text driver in `lexer_test.c`

[2025-05-29] - Day 3: Tests Folder Initialization
- Defined the automated test for `Hello, World` in `test_lexer_hello.py`
- Corrected syntax and semantic errors in `main.c` and `token.c`
- Updated the Makefile to build `seec` executable

[2025-05-30] - Day 4: AST and Parser Initializations
- Defined the structure of AST in `ast.c` in `src/`
- Defined the procedure of parser in `parser.c` in `src/` 
- Developed a unit test of parser in `parser_test.c` in `src/`
- Automated the test of parser with Python script in `test_parser.py` in `tests`
- Integrated the procedure of the lexer to `lexer.c`
- Defined the main driver of `seec` in main.c

[2025-06-02] - Day 5: Lexer and Parser Testing Initialization
- Initializaed the program driver in `main.c`
- Developing unit tests for `lexer.c` and `parser.c`
- Planning regression tests for `main.c`

[2025-06-03] - Day 6: Refactoring `SeeC`
- Refactored the functionality of `src/`
- Refactored the functionality of `tests/`
- Refactored the utilities functionality of `src/` into `utils`

[2025-06-04] - Day 7: Initialized Unit Tests for `lexer.c`
- Developed a basic unit test to ensure that the lexer takes a C string and produces a token stream
- Made an automation suite to test different behavior of `lexer.c` and `parser.c`

[2025-06-05] - Day 8: README Refactor and Design Documentation Initialization
- Wrote up purpose, pipeline, and layout sections in README.md
- Wrote up design documentation for the lexer and parser components
- Reorganized the project layout to be modular and clear
- Deleted unnecessary automation tests

[2025-06-06] - Day 9: Python Automation Refactor
- Defined the expected behavior of `seec` for code generation and error handling
- Rewrote layout in `README.md` to reflect this change

[2025-06-10] - Day 10: Semantic Analysis, IR Representation, and x86 Code Generation Initialized
- Created the semantic analysis tool in `semantic.c`
- Created the IR representation structure in `ir.c`
- Created the code generator pipeline in `codegen.c`
- Defined the unit tests for the componented described above
